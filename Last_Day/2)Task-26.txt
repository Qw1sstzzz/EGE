1. Чеки (4629, 4660, 4684, 6759, 17687)
    Суть: поиск выгодной стратегии для магазина и покупателя
    Ситуации:
        1. Каждый M товар в чеке для магазина
            prices.sort()
            summ = sum(prices) - sum(prices[:N // M])
        2. Каждый M товар в чеке для покупателя фантазера
            prices.sort(reverse=True)
            summ = sum(prices) - sum(prices[:N // M])
        3. Каждый M товар в чеке для покупателя реалиста
            prices.sort(reverse=True)
            summ = sum(prices) - sum(prices[M - 1::M])

2. Сисадмин / фура / закупка товаров (2944, 1232, 1207, 16390, 12256, 6641)
    Суть: уместить максимальное кол-во элементов в выделенный объем пространства
    Идея: выбирать самые маленькие элементы,
          в конце не забыть максимально заполнить оставшееся пространство
    Алгоритм:
        boxes = sorted(boxes)
        cnt = []
        for box in boxes:
            if box <= s:
                s -= box
                cnt.append(box)

        s += cnt.pop()
        boxes = sorted(boxes)[::-1]
        for box in boxes:
            if box <= s:
                cnt.append(box)
                break
        print(len(cnt), cnt[-1])

3. Коробки / торты / кольца (4604, 4712, 6031, 6056, 15341, 21424)
    Суть: матрешка
    Идея: рассматриваем всегда самый большой элемент из доступных
    Алгоритм:
        cakes = sorted(cakes)[::-1]
        last = cakes[0]
        cnt = 1
        for cake in cakes:
            if last - cake >= 8:
                last = cake
                cnt += 1
        print(cnt, last)

4. Лесопосадка / человеко посадка (4205, 3586, 3230, 1868)
    Суть: выбрать рядом стоящие позиции в одном ряду
    Идея: перебирать по два элемента, находящие на расстоянии K
    Алгоритм:
    trees = sorted(trees, key=lambda x: (-x[0], x[1]))
    for tree1, tree2 in zip(trees, trees[1:]):
        if tree1[0] == tree2[0]:
            if tree2[1] - tree1[1] == K + 1:
                print(tree1[0], tree1[1] + 1)
                break

5. Конференц-зал (9756, 10107)
    Суть: провести как можно больше мероприятий
    Идея: сортируем по времени окончания - чем раньше закончилось, тем больше проведем
    Алгоритм:
        events = sorted(events, key=lambda x: x[1])
        approved = [events[0]]
        for event in events:
            if approved[-1][1] <= event[0]:
                approved.append(event)

        last = approved.pop()
        print(len(approved) + 1, max(events)[0] - approved[-1][1])  # проверка есть ли выгодней разница между началом и концом


6. Места в зале (17537, 20910)
    Суть: найти два места в одном ряду, перед которыми все места свободны
    Идея: для каждого места запоминаем номер ряда, перед которым никто не сидит
    Алгоритм:
        with open("26_17537.txt") as file:
            n, m, k = map(int, file.readline().split())
            suitable = [m] * (k + 1)
            for i in file:
                row, col = map(int, i.split())
                suitable[col] = min(suitable[col], row)  # сохраняем место на которое можем сесть

        ans = []
        for i in range(2, k + 1):
            place1, place2 = suitable[i - 1], suitable[i]  # аппендим подходящий ряд и макс. место из пары
            ans.append([min(place1, place2) - 1, i])

        print(max(ans))


7. Зачисление студентов / моряков / космонавтов (17565, 17881, 20815)
    Суть: составить рейтинговый список
    Идея: правильно отсортировать
    Алгоритм:
        with open("26_17565.txt") as file:
            n, s = map(int, file.readline().split())
            sailors = []
            for i in file:
                ID, b1, b2, b3, b4 = map(int, i.split())
                sailors.append([ID, (b1 + b2 + b3), b4])

        sailors = sorted(sailors, key=lambda x: (-x[1], -x[2]))

        # 1
        print(sailors[:s])
        print(sailors[s:s + 2])      # смотрим полупроходной
        print(len([i for i in sailors if i[1] == 154]))     # можно посмотреть глазами

        # 2
        if sailors[s - 1][1] == sailors[s][1]:
            id_last = [sailor[0] for sailor in sailors if sailor[1] > sailors[s - 1][1]][-1]
            cnt = len([1 for sailor in sailors if sailor[1] == sailors[s - 1][1]])
        else:
            id_last = sailors[s - 1][0]
            cnt = 0

        print(id_last, cnt)


8. Лидер продаж (17643)
    Суть: лидер продаж
    Идея: создать словарь и по артикулу записать о нем информации
    Алгоритм:
        with open('Task-26-17643-file.txt') as f:
            N = int(f.readline())
            data = [list(map(int, i.split())) for i in f]

        exp = []
        Avg_price = sum([i[1] for i in data]) / N
        for i in data:
            if int(i[1]) > Avg_price:
                exp.append(i)

        all_exp = dict()
        for i in exp:
            ID, Price, State = i
            all_exp[ID] = [0, Price, 0]

        for i in exp:
            ID, Price, State = i
            if State == 0:
                all_exp[ID][0] += 1
            else:
                all_exp[ID][-1] += 1

        d = all_exp.values()

        d = sorted(d, key=lambda x: (-x[0], -x[1], x[2]))

        leader = d[0]
        print(leader[0] * leader[1], leader[2])


9. Решенные задачи (19256, 21719)
    Суть: найти ученика с наибольшим кол-вом решенных задач в определенном порядке
    Идея: создаем словарь множеств, куда помещаем решенные задачи каждого студента
          перебираем каждого студента, сортируем его задачи, ищем самую длинную подходящую цепочку
    Алгоритм:
        with open('Task-26-19256-file.txt') as f:
            N = int(f.readline())
            data = [list(map(int, i.split())) for i in f]

        data = sorted(data)
        exercises = dict()
        for i in data:
            ID, Num = i
            if ID not in exercises:
                exercises[ID] = [Num]
            else:
                if Num not in exercises[ID]:
                    exercises[ID].append(Num)

        ans = []
        for i in exercises.items():
            ID = i[0]
            Tasks = i[1]
            cnt = 0
            c_p = 1
            for j in range(len(Tasks) - 1):
                if Tasks[j+1] - Tasks[j] == 1:
                    c_p += 1
                else:
                    c_p = 1
                cnt = max(c_p, cnt)
            ans.append([ID, cnt])

        ans = sorted(ans, key=lambda x: (-x[1], x[0]))

        print(*ans[0])


10. Камеры хранения (7602, 7626, 8512)
    Суть: определить сколько будет обслужено клиентов
    Идея: сортируем посетителей по времени прихода, создаем список камер хранения, запоминаем, когда освободится ячейка
    Алгоритм:
        with open('Task-26-7602-file.txt') as f:
            K = int(f.readline())
            N = int(f.readline())
            time = [list(map(int, i.split())) for i in f]

        luggage = [0] * K
        time = sorted(time)

        cnt = 0
        last = 0
        for t in time:
            for i in range(K):
                if t[0] >= luggage[i] + 1:
                    luggage[i] = t[1]
                    cnt += 1
                    last = i + 1
                    break

        print(cnt, last)


11. Пик посещаемости (9847)
    Алгоритм:
        with open('Task-26-9847-file.txt') as f:
            N = int(f.readline())
            data = [list(map(int, i.split())) for i in f]

        timeline = [0] * (60*24)

        for i in data:
            start, end = i
            for k in range(start, end):
                timeline[k] += 1

        res = []
        peak = max(timeline)

        for l in range(len(timeline)):
            if timeline[l] == peak:
                res.append(l)

        cnt = 1

        for k in range(len(res) - 1):
            if res[k+1] - res[k] != 1:
                cnt += 1

        print(cnt, peak)


8. Детали (9793)
    Алгоритм:
        with open('Task-26-9793-file.txt') as f:
            N = int(f.readline())
            details = []
            for pos, i in enumerate(f, start=1):
                sh, ok = map(int, i.split())
                details.append([sh, 'sh', pos])
                details.append([ok, 'ok', pos])

        details = sorted(details)
        conveyor = [0]*N
        last = 0

        for time, tip, num in details:
            if num not in conveyor:
                if tip == 'sh':
                    vacant = conveyor.index(0)
                    conveyor[vacant] = num
                    last = num
                else:
                    vacant = N - conveyor[::-1].index(0) - 1
                    conveyor[vacant] = num
                    last = num

        print(last, conveyor.index(last))